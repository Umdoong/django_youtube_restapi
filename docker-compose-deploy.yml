version: "3.11"

services: # 정의된 컨테이너 그룹
  app: # Django
    build: # 이 컨테이너의 이미지를 빌드
      context: . # 현재 디렉터리를 빌드 컨텍스트로 사용 (Dockerfile이 이 디렉터리에 있어야 함)
    restart: always # 컨테이너가 종료되었을 때 항상 재시작하도록 설정
    volumes: # 컨테이너와 호스트 간 데이터를 공유하는 디렉터리
      # static-data가 컨테이너의 /vol/web 디렉터리에 연결됩니다, Django의 정적 파일(static files)을 저장하거나 제공하는 데 사용됩니다.
      - static-data:/vol/web
    environment: # 컨테이너 내부에서 사용할 환경 변수를 정의 / 환경 변수 값은 .env 파일에서 가져오도록 설정 (${...})
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    depends_on: # app 서비스가 db 서비스가 시작된 이후에 실행되도록 보장
      - db

  db: # postgresql
    image: postgres:13-alpine
    restart: always
    volumes: # 데이터베이스 데이터를 영구적으로 저장하는 볼륨
      - postgres-data:/var/lib/postgresql/data # postgres-data가 컨테이너의 /var/lib/postgresql/data 경로와 연결
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}

  proxy: # Nginx
    build:
      context: ./proxy # proxy 컨테이너 이미지를 빌드합니다 (./proxy 디렉터리에 Dockerfile이 있어야 합니다)
    restart: always
    depends_on:
      - app
    ports:
    # 호스트의 80 포트를 컨테이너의 8000 포트와 연결
    # 브라우저에서 http://<호스트주소>로 접속하면 컨테이너의 8000번 포트로 요청이 전달
      - 80:8000 # ec2-123-123-123.com/api/v1 (from:to)
#       - 8000:8000 # 로컬에서 테스트 시
    volumes:
      - static-data:/vol/static

volumes:
  postgres-data: # PostgreSQL 데이터베이스의 영구 데이터 저장
  static-data: # Django 정적 파일 저장